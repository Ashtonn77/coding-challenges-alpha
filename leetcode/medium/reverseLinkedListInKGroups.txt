/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
        ListNode dummy = new ListNode(0, head);
        ListNode cur = head;
        ListNode prev = dummy;
        
        while(cur != null){
            
            ListNode tail = cur;
            int idx = 0;
            
            while(cur != null && idx < k){
                
                cur = cur.next;
                idx++;
                                
            }
            
            if(idx != k)
                prev.next = tail;
            else{
                prev.next = reversePartK(tail, k);
                prev = tail;
            }
            
        }
        
        return dummy.next;
        
    }
    
    private ListNode reversePartK(ListNode head, int k){
        
        ListNode cur = head;
        ListNode prev = null;
        ListNode next = null;
        
        while(cur != null && k-- > 0){
            
            next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
            
        }
        
        head = prev;
        return head;
        
    }
    
}