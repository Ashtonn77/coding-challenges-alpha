/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        
        List<Integer> arr = new ArrayList<>();
        buildList(root, arr);
        return isValid(arr, k);
        
    }
    
    private void buildList(TreeNode root, List<Integer> arr){
        
        if(root == null)
            return;
        
        buildList(root.left, arr);
        arr.add(root.val);
        buildList(root.right, arr);
        
    }
    
    private boolean isValid(List<Integer> list, int target){
        
        Map<Integer, Integer> map = new HashMap<>();
        for(var num : list)
            if(map.containsKey(num))
                map.put(num, map.get(num) + 1);
            else
                map.put(num, 1);
        
        for(var num : list){
            
            int el = target - num;
            if(map.containsKey(el)){
                
                if(el == num)
                    if(map.get(el) == 1)
                        return false;
                
                return true;
            }            
            
        }
        
        return false;
        
    }
    
}