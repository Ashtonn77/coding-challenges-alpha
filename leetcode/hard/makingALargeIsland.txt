public class Solution {
    
    int sm = 0;
    
    public int LargestIsland(int[][] grid) {
        
        int[][] directions = new int[4][];
        directions[0] = new int[]{1, 0};
        directions[1] = new int[]{-1, 0};
        directions[2] = new int[]{0, 1};
        directions[3] = new int[]{0, -1};
        
        int m = grid.Length;
        int n = grid[0].Length;
        int mx = Int32.MinValue;
        int id = 2;
        IDictionary<int, int> map = new Dictionary<int, int>();
        
        for(int i = 0; i < m; i++){
            
            for(int j = 0; j < n; j++){
                
                if(grid[i][j] == 1){
                    
                    int size = dfs(grid, i, j, id);
                    mx = Math.Max(mx, size);
                    map.Add(id++, size);
                    
                }
                
            }
            
        }
        
        
        for(int i = 0; i < m; i++){
            
            for(int j = 0; j < n; j++){
                
                if(grid[i][j] == 0){
                    
                    HashSet<int> sp = new HashSet<int>();
                    foreach(var direction in directions){
                        
                        int x = direction[0] + i;
                        int y = direction[1] + j;
                        
                        if(x >= 0 && y >= 0 && x < m && y < n && grid[x][y] != 0){
                            sp.Add(grid[x][y]);
                        }
                        
                        
                    }
                    
                    int sm = 1;
                    foreach(var num in sp){
                        int v = map[num];
                        sm += v;
                    }
                    
                    mx = Math.Max(mx, sm);
                    
                }
                
            }
            
        }
        
        
        return mx;        
        
    }
    
    private int dfs(int[][] grid, int i, int j, int id){
        
        if(i < 0 || j < 0 || i > grid.Length - 1 || j > grid[0].Length - 1 || grid[i][j] != 1)
            return 0;
        
         grid[i][j] = id;
        
         int right = dfs(grid, i + 1, j, id);
         int left = dfs(grid, i - 1, j, id);
         int up = dfs(grid, i, j - 1, id);
         int down = dfs(grid, i, j + 1, id);

        return right + left + up + down + 1;
        
    }
    
}